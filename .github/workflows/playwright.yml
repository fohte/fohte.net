name: Playwright VRT

on:
  pull_request:
    branches: [master]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'bun.lock'
      - 'playwright.config.ts'
      - 'tests/vrt/**'

jobs:
  vrt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.bun/install/global
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright browsers
        run: bunx playwright install chromium

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('bun.lock') }}

      - name: Build application
        run: bun run build

      - name: Run Playwright VRT tests
        run: bun run test:vrt

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vrt-screenshots
          path: tests/vrt/**/*.png
          retention-days: 30

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const resultsPath = './test-results/results.json';

            let message = '## üì∏ Visual Regression Test Results\n\n';

            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const { passed, failed, skipped } = results.summary;

              if (failed === 0) {
                message += '‚úÖ All visual regression tests passed!\n\n';
              } else {
                message += `‚ùå ${failed} visual regression test(s) failed.\n\n`;
                message += 'Please check the artifacts for detailed results and screenshots.\n\n';
              }

              message += `**Summary**: ${passed} passed, ${failed} failed, ${skipped} skipped\n`;
            } else {
              message += '‚ö†Ô∏è Could not find test results. Please check the workflow logs.\n';
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
